@import '../../styles/border';
@import '../../styles/color';
@import '../../styles/type';

$caButton-border-width: 1px;
$caButton-focus-border-width: 2px;

// reset user agent syles for button elment type
@mixin button-reset {
  appearance: none;
  background: transparent;
  border: none;
  font: inherit;
  margin: 0;
  padding: 0;
  transition: none; // override Murmur global styles :(
}

%caButtonContainer {
  @include ca-type-block(inline-block);
}

%caButton {
  @include button-reset;
  @include ca-type-ideal-button;

  display: inline-block;
  border: $caButton-border-width solid;
  border-radius: $ca-border-radius;
  // looking for padding? See %caButtonContent

  &[href] {
    text-decoration: none;
  }

  // Enabled (to restrict application of hover/focus/active styles)
  //
  // We can't just used :enabled here, because we want to be able to apply these
  // styles to non-form elements, such as hyperlinks. :not(:disabled) is
  // equivalent to :enabled on form elements, but also allows these styles to be
  // applied to elements that have no enabled/disabled states.
  &:not(:disabled) {
    background: $white;
    border-color: add-tint($ca-palette-ink, 80%);
    color: $ca-palette-ink;

    &:hover,
    &:active {
      background: add-tint($ca-palette-ink, 97%);
      border-color: add-tint($ca-palette-ink, 60%);
    }

    &:active {
      background: add-tint($ca-palette-ink, 94%);
      border-color: add-tint($ca-palette-ink, 40%);
      transform: translateY(1px);
    }

    // Use JS polyfill to simulate :focus-visible, not yet supported by browsers
    // https://github.com/WICG/focus-visible#backwards-compatibility
    :global(.js-focus-visible) & {
      // hide native focus ring when :focus but not :focus-visible
      &:focus {
        outline: none;
      }

      // show custom focus ring when :focus-visible
      &:global(.focus-visible) {
        border: $caButton-focus-border-width solid $ca-palette-ocean;
      }
    }
  }

  // Disabled
  &:disabled {
    background: $white;
    border-color: add-tint($ca-palette-ink, 80%);
    color: add-tint($ca-palette-ink, 70%);
  }
}

%caButtonPrimary,
%caButtonDestructive {
  &:not(:disabled) {
    background: add-tint($ca-palette-seedling, 10%);
    border-color: add-tint($ca-palette-seedling, 10%);
    color: $white;

    &:hover {
      background: $ca-palette-seedling;
      border-color: $ca-palette-seedling;
    }

    &:active {
      background: add-shade($ca-palette-seedling, 10%);
      border-color: add-shade($ca-palette-seedling, 10%);
    }
  }

  &:disabled {
    background: add-tint($ca-palette-ink, 90%);
    border-color: add-tint($ca-palette-ink, 90%);
  }
}

%caButtonDestructive:not(:disabled) {
  background: $ca-palette-coral;
  border-color: $ca-palette-coral;

  &:hover {
    background: add-shade($ca-palette-coral, 10%);
    border-color: add-shade($ca-palette-coral, 10%);
  }

  &:active {
    background: add-shade($ca-palette-coral, 15%);
    border-color: add-shade($ca-palette-coral, 15%);
  }

  :global(.js-focus-visible) &:global(.focus-visible) {
    border-color: add-shade($ca-palette-coral, 40%);
  }
}

%caButtonSecondary {
  @include ca-type-ideal-body-bold;

  &:not(:disabled) {
    background: transparent;
    border-color: transparent;
    color: add-tint($ca-palette-ocean, 30%);

    %caButtonLabel {
      color: $ca-palette-ocean;
    }

    &:hover,
    &:active {
      color: $ca-palette-ocean;
      background: add-tint($ca-palette-ink, 94%);
      border-color: transparent;
    }

    &:active {
      background: add-tint($ca-palette-ink, 90%);
    }
  }

  &:disabled {
    background: transparent;
    border-color: transparent;
    color: add-tint($ca-palette-ink, 70%);
  }
}

%caButtonTertiary {
  @extend %caButtonSecondary;

  &:not(:disabled) {
    &:hover,
    &:active {
      background: transparent;
    }
  }
}

%caButtonReversed {
  &:not(:disabled) {
    background: transparent;
    border-color: $white;
    color: $white;

    &:hover {
      background: add-alpha($white, 10%);
      border-color: $white;
    }

    :global(.js-focus-visible) &:global(.focus-visible) {
      border-color: $ca-palette-yuzu;

      &:not(:active) {
        background: add-alpha($white, 10%);
      }
    }

    &:active {
      background: add-alpha($white, 20%);
      border-color: $white;
    }
  }

  &:disabled {
    background: transparent;
    border-color: add-alpha($white, 30%);
    color: add-alpha($white, 30%);
  }

  &%caButtonPrimary {
    &:not(:disabled) {
      background: $white;
      border-color: transparent;
      color: $ca-palette-ink;

      &%caButtonReverseColorLapis {
        color: $ca-palette-lapis;
      }

      &%caButtonReverseColorOcean {
        color: $ca-palette-ocean;
      }

      &%caButtonReverseColorPeach {
        color: $ca-palette-peach;
      }

      &%caButtonReverseColorSeedling {
        color: $ca-palette-seedling;
      }

      &%caButtonReverseColorWisteria {
        color: $ca-palette-wisteria;
      }

      &%caButtonReverseColorYuzu {
        color: $ca-palette-yuzu;
      }

      &:hover {
        background: add-alpha($white, 95%);
      }

      :global(.js-focus-visible) &:global(.focus-visible) {
        border-color: $ca-palette-yuzu;

        &:not(:active) {
          background: add-alpha($white, 95%);
        }
      }

      &:active {
        background: add-alpha($white, 90%);
        border-color: transparent;
      }

      // knockout text effect (background visible through text) for supported browsers
      @supports (mix-blend-mode: lighten) {
        // add background to %caButtonContent instead, so we can mix-blend-mode the button's background but not its border (for solid focus ring)
        background: transparent;
        border-width: 0;
        overflow: hidden;

        %caButtonContent {
          mix-blend-mode: screen;
          background: $white;
          color: $black; // mix-blend-mode makes this transparent
        }

        &:hover {
          background: transparent;

          %caButtonContent {
            // mix-blend-mode makes this 95% alpha white
            background: add-tint($black, 95%);
          }
        }

        :global(.js-focus-visible) &:global(.focus-visible):not(:active) {
          background: transparent;

          %caButtonContent {
            // mix-blend-mode makes this 95% alpha white
            background: add-tint($black, 95%);
          }
        }

        &:active {
          background: transparent;

          // translateY interferes with mix-blend-mode, so use margin instead
          margin-top: 1px;
          margin-bottom: -1px;
          transform: none;

          %caButtonContent {
            // mix-blend-mode makes this 90% alpha white
            background: add-tint($black, 90%);
          }
        }
      }
    }

    &:disabled {
      background: add-alpha($white, 10%);
      border-color: transparent;
    }
  }
}

%caButtonContent {
  display: flex;
  align-items: center;

  // Padding applied to button content and not button so that mix-blend-mode
  // effects can be applied to the button content but not the button border
  padding: calc(#{$ca-grid / 2} - #{$caButton-border-width})
    calc(#{$ca-grid * 1} - #{$caButton-border-width});

  %caButtonForm & {
    padding: calc(#{$ca-grid / 3} - #{$caButton-border-width})
      calc(#{$ca-grid * 1} - #{$caButton-border-width});
  }

  %caButtonTertiary & {
    padding: calc(.75rem - 1px);
  }

  @supports (mix-blend-mode: screen) {
    %caButtonReversed%caButtonPrimary & {
      padding: ($ca-grid / 2) ($ca-grid * 1);
    }

    %caButtonForm%caButtonReversed%caButtonPrimary & {
      padding: ($ca-grid / 3) ($ca-grid * 1);
    }
  }

  :global(.js-focus-visible) %caButton:global(.focus-visible) & {
    padding: calc(#{$ca-grid / 2} - #{$caButton-focus-border-width})
      calc(#{$ca-grid * 1} - #{$caButton-focus-border-width});
  }

  :global(.js-focus-visible) %caButtonForm:global(.focus-visible) & {
    padding: calc(#{$ca-grid / 3} - #{$caButton-focus-border-width})
      calc(#{$ca-grid * 1} - #{$caButton-focus-border-width});
  }
}

%caButtonLabel {
  &:only-child {
    margin: 0 $ca-grid / 2;
  }

  &:not(:first-child) {
    margin-left: 0.5em;
  }

  &:not(:last-child) {
    margin-right: 0.5em;
  }
}
